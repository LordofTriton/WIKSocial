generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("POSTGRESQL_DB_URL")
}

model User {
  userId            Int         @id @default(autoincrement())
  username          String      @db.VarChar(256)
  email             String      @unique @db.VarChar(256)   
  password          String       
  profileImageId    Int?        @unique
  coverImageId      Int?        @unique
  rating            Int         @default(0)
  bio               String      @db.VarChar(256) @default("I am a human :D")
  userType          String      @db.VarChar(256) @default("BASIC")
  userStatus        String      @db.VarChar(256) @default("INACTIVE")
  isSetupComplete   Boolean     @default(false)
  verificationCode  String?     
  accessCode        String?     
  resetCode         String?     
  googleId          String?     @unique
  yandexId          String?     @unique
  vkontakteId       String?     @unique
  lastLogin         String      @default(dbgenerated("to_char(current_timestamp, 'YYYY-MM-DD HH24:MI:SS.MS')"))
  lastActive        String      @default(dbgenerated("to_char(current_timestamp, 'YYYY-MM-DD HH24:MI:SS.MS')"))
  dateCreated       String      @default(dbgenerated("to_char(current_timestamp, 'YYYY-MM-DD HH24:MI:SS.MS')"))

  posts             Post[]
  notions           Notion[]
  
  profileImage      CloudFile?  @relation(fields: [profileImageId], references: [cloudFileId], name: "ProfileImage") 
  coverImage        CloudFile?  @relation(fields: [coverImageId], references: [cloudFileId], name: "CoverImage")
}

model Notification {
  notificationId      Int         @id @default(autoincrement())
  userId              Int         
  content             String      @db.VarChar(256)
  notificationType    String      
  referenceId         String?     
  isRead              Boolean     @default(false)
  dateCreated         String      @default(dbgenerated("to_char(current_timestamp, 'YYYY-MM-DD HH24:MI:SS.MS')"))
}

model Exception {
  exceptionId    Int         @id @default(autoincrement())
  code           Int         
  action         String      
  message        String      @db.VarChar(256)
  metadata       String?     @db.VarChar(256)
  dateCreated    String      @default(dbgenerated("to_char(current_timestamp, 'YYYY-MM-DD HH24:MI:SS.MS')"))
}

model Settings {
  settingsId                Int         @default(autoincrement())
  userId                    Int         @id
  emailCommentReplies       Boolean     @default(true)
  emailCommentMentions      Boolean     @default(true)
  emailNewPostComment       Boolean     @default(true)
  emailNewPosts             Boolean     @default(true)
  emailBestOfTheWeek        Boolean     @default(false)
  emailPostCommentRatings   Boolean     @default(true)
  commentReplies            Boolean     @default(true)
  commentMentions           Boolean     @default(true)
  newPostComment            Boolean     @default(true)
  newFollowers              Boolean     @default(true)
  postCommentRatings        Boolean     @default(true)  
  darkMode                  Boolean     @default(false)  
  homeDefault               String      @default("POPULAR")
  feedSort                  String      @default("DATE")
  blurSensitiveContent      Boolean     @default(true) 
  dateCreated               String      @default(dbgenerated("to_char(current_timestamp, 'YYYY-MM-DD HH24:MI:SS.MS')"))
}

model CloudFile {
  cloudFileId          Int              @id @default(autoincrement())
  userId               Int         
  publicId             String           @db.VarChar(256)
  uri                  String?          @db.VarChar(256)
  fileType             String           @db.VarChar(256)
  dateCreated          String           @default(dbgenerated("to_char(current_timestamp, 'YYYY-MM-DD HH24:MI:SS.MS')"))

  userProfiles         User[]           @relation(name: "ProfileImage")
  userCovers           User[]           @relation(name: "CoverImage")
  communityProfiles    Community[]      @relation(name: "ProfileImage")
  communityCovers      Community[]      @relation(name: "CoverImage")
}

model Notion {
  notionId        Int         @id @default(autoincrement())
  userId          Int      
  referenceId     Int      
  isSubscribed    Boolean     @default(false) 
  isHidden        Boolean     @default(false) 
  isBlocked       Boolean     @default(false) 
  dateCreated     String      @default(dbgenerated("to_char(current_timestamp, 'YYYY-MM-DD HH24:MI:SS.MS')"))

  user            User        @relation(fields: [userId], references: [userId])
}

model Post {
  postId             Int             @id @default(autoincrement())
  userId             Int         
  communityId        Int?        
  sharedPostId       Int?        
  textContent        String
  linkContent        String
  mediaContentIds    String[]
  dateCreated        String          @default(dbgenerated("to_char(current_timestamp, 'YYYY-MM-DD HH24:MI:SS.MS')"))

  author             User?           @relation(fields: [userId], references: [userId])
  community          Community?      @relation(fields: [communityId], references: [communityId])
  sharedPost         Post?           @relation(fields: [sharedPostId], references: [postId], name: "SharedPost")
  postShared         Post[]          @relation(name: "SharedPost")
}

model Community {
  communityId       Int           @id @default(autoincrement())
  name              String
  displayName       String
  profileImageId    Int?          @unique
  coverImageId      Int?          @unique
  description       String
  status            String        @db.VarChar(256) @default("ACTIVE")
  dateCreated       String        @default(dbgenerated("to_char(current_timestamp, 'YYYY-MM-DD HH24:MI:SS.MS')"))

  posts             Post[]
  
  profileImage      CloudFile?    @relation(fields: [profileImageId], references: [cloudFileId], name: "ProfileImage") 
  coverImage        CloudFile?    @relation(fields: [coverImageId], references: [cloudFileId], name: "CoverImage")
}